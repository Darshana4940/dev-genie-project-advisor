
import React, { useState, useEffect } from 'react';
import { 
  Sheet, 
  SheetContent, 
  SheetHeader, 
  SheetTitle, 
  SheetDescription 
} from '@/components/ui/sheet';
import { Button } from '@/components/ui/button';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Card, CardContent } from '@/components/ui/card';
import { Separator } from '@/components/ui/separator';
import { Badge } from '@/components/ui/badge';
import { AIConfigState, ProjectSuggestion, ProjectDetails } from '@/types';
import { Loader2, FileText, GitBranch, Map, Code } from 'lucide-react';
import ProjectSourceCode from '@/components/ProjectSourceCode';
import { useToast } from '@/hooks/use-toast';

interface ProjectDetailViewProps {
  project: ProjectSuggestion | null;
  open: boolean;
  onOpenChange: (open: boolean) => void;
  aiConfig: AIConfigState;
}

const ProjectDetailView: React.FC<ProjectDetailViewProps> = ({ 
  project, 
  open, 
  onOpenChange,
  aiConfig
}) => {
  const { toast } = useToast();
  const [loading, setLoading] = useState(true);
  const [currentTab, setCurrentTab] = useState('description');
  const [projectDetails, setProjectDetails] = useState<ProjectDetails>({
    detailedDescription: '',
    projectStructure: '',
    roadmap: '',
    flowchart: '',
    pseudoCode: ''
  });
  const [sourceCodeOpen, setSourceCodeOpen] = useState(false);
  const [activeAI, setActiveAI] = useState<string>('');

  useEffect(() => {
    if (open && project) {
      setLoading(true);
      fetchProjectDetails(project);
    }
  }, [open, project]);

  const getEnabledAI = (): string => {
    // Priority order: OpenAI -> Gemini -> Claude -> GitHub
    if (aiConfig.openai.enabled && aiConfig.openai.apiKey) {
      return 'openai';
    } else if (aiConfig.gemini.enabled && aiConfig.gemini.apiKey) {
      return 'gemini';
    } else if (aiConfig.claude.enabled && aiConfig.claude.apiKey) {
      return 'claude';
    } else if (aiConfig.github.enabled && aiConfig.github.apiKey) {
      return 'github';
    }
    return '';
  };

  const fetchProjectDetails = async (project: ProjectSuggestion) => {
    // Determine which AI to use based on priority and availability
    const enabledAI = getEnabledAI();
    setActiveAI(enabledAI);
    
    if (!enabledAI) {
      toast({
        title: "No AI Model Available",
        description: "Please enable and configure at least one AI model in settings.",
        variant: "destructive",
      });
      setLoading(false);
      return;
    }

    // In a real implementation, you would make API calls to the selected AI service
    // For now, we'll simulate a response
    setTimeout(() => {
      setProjectDetails({
        detailedDescription: generateDetailedDescription(project, enabledAI),
        projectStructure: generateProjectStructure(project),
        roadmap: generateRoadmap(project),
        flowchart: generateFlowchart(project),
        pseudoCode: generatePseudoCode(project)
      });
      setLoading(false);
    }, 2000);
  };

  const generateDetailedDescription = (project: ProjectSuggestion, aiModel: string) => {
    return `# ${project.title} - Comprehensive Overview

This project aims to create a ${project.title.toLowerCase()} that solves real-world problems in the ${project.tags.join(', ')} domains. 

## Key Features

1. **Interactive User Interface**: Modern, responsive design with intuitive navigation
2. **Data Management**: Efficient storage and retrieval of user data
3. **Integration Capabilities**: Seamless connection with external APIs and services
4. **Scalable Architecture**: Designed to handle increasing user loads

## Technical Requirements

This project requires experience with ${project.skills.join(', ')}. It's classified as a ${project.difficulty} level project, making it suitable for developers with ${project.difficulty === 'beginner' ? 'basic understanding of programming concepts' : project.difficulty === 'intermediate' ? 'moderate experience in software development' : 'advanced knowledge of system architecture and design patterns'}.

## Potential Challenges

- Implementing real-time data synchronization
- Ensuring cross-platform compatibility
- Optimizing performance for large datasets
- Managing authentication and authorization securely

*Generated by ${aiModel.toUpperCase()} AI*`;
  };

  const generateProjectStructure = (project: ProjectSuggestion) => {
    return `# Project Structure

\`\`\`
project-root/
├── .github/            # GitHub workflow configurations
├── docs/               # Documentation files
├── src/                # Source code
│   ├── assets/         # Static assets (images, fonts, etc.)
│   ├── components/     # Reusable UI components
│   │   ├── common/     # Shared components
│   │   ├── layout/     # Layout components
│   │   └── feature/    # Feature-specific components
│   ├── hooks/          # Custom React hooks
│   ├── pages/          # Page components
│   ├── services/       # API services
│   ├── store/          # State management
│   ├── types/          # TypeScript type definitions
│   ├── utils/          # Utility functions
│   ├── App.tsx         # Main App component
│   └── index.tsx       # Entry point
├── public/             # Public assets
├── tests/              # Test files
├── .eslintrc           # ESLint configuration
├── .prettierrc         # Prettier configuration
├── tsconfig.json       # TypeScript configuration
├── package.json        # Dependencies and scripts
└── README.md           # Project documentation
\`\`\`

## Key Directories Explained

- **components/**: Contains all UI components organized by purpose
- **services/**: API clients and services for data fetching
- **store/**: State management using Redux/Context API
- **hooks/**: Custom React hooks for shared logic
- **utils/**: Helper functions and utilities

## Dependencies

- React (UI Library)
- TypeScript (Type Safety)
- ${project.skills.includes('Redux') ? 'Redux (State Management)' : 'Context API (State Management)'}
- ${project.skills.includes('Tailwind') ? 'Tailwind CSS (Styling)' : 'Styled Components (Styling)'}
- ${project.skills.includes('Jest') ? 'Jest (Testing)' : 'React Testing Library (Testing)'}
- ${project.skills.includes('Axios') ? 'Axios (API Requests)' : 'Fetch API (API Requests)'}`;
  };

  const generateRoadmap = (project: ProjectSuggestion) => {
    return `# Project Roadmap

## Phase 1: Foundation (${project.timeEstimate.split('-')[0]} weeks)

- [ ] Project setup and configuration
- [ ] Design system implementation
- [ ] Core components development
- [ ] Basic routing and navigation
- [ ] Authentication system (if required)

## Phase 2: Feature Development (${project.timeEstimate.includes('weeks') ? '2-3 weeks' : '1-2 months'})

- [ ] Implement main features
- [ ] Develop API integration
- [ ] Create data models and state management
- [ ] Build user flows and interactions
- [ ] Implement error handling and form validation

## Phase 3: Refinement and Testing (${project.timeEstimate.includes('weeks') ? '1-2 weeks' : '2-3 weeks'})

- [ ] Unit and integration testing
- [ ] Performance optimization
- [ ] Accessibility improvements
- [ ] Cross-browser compatibility
- [ ] Documentation

## Phase 4: Launch and Iteration (${project.timeEstimate.includes('weeks') ? '1 week' : '2 weeks'})

- [ ] Deployment preparation
- [ ] CI/CD pipeline setup
- [ ] Monitoring and analytics integration
- [ ] User feedback collection
- [ ] Iterative improvements

## Learning Milestones

1. **${project.skills[0]}**: Advanced implementation techniques
2. **${project.skills[1] || 'State Management'}**: Best practices for scalable applications
3. **${project.skills[2] || 'API Integration'}**: Efficient data fetching and caching
4. **${project.skills[3] || 'Testing'}**: Comprehensive testing strategies

*Estimated total completion time: ${project.timeEstimate}*`;
  };

  const generateFlowchart = (project: ProjectSuggestion) => {
    return `# Application Flow

\`\`\`
┌─────────────────┐     ┌─────────────────┐     ┌─────────────────┐
│                 │     │                 │     │                 │
│  User Interface │────▶│   Application   │────▶│   Data Layer    │
│                 │     │     Logic       │     │                 │
└─────────────────┘     └─────────────────┘     └─────────────────┘
         │                      │                        │
         │                      │                        │
         ▼                      ▼                        ▼
┌─────────────────┐     ┌─────────────────┐     ┌─────────────────┐
│                 │     │                 │     │                 │
│  User Actions   │────▶│ Business Logic  │────▶│   Data Storage  │
│                 │     │                 │     │                 │
└─────────────────┘     └─────────────────┘     └─────────────────┘
         │                      │                        │
         │                      │                        │
         ▼                      ▼                        ▼
┌─────────────────┐     ┌─────────────────┐     ┌─────────────────┐
│                 │     │                 │     │                 │
│   Rendering     │◀────│  State Updates  │◀────│  API Services   │
│                 │     │                 │     │                 │
└─────────────────┘     └─────────────────┘     └─────────────────┘
\`\`\`

## Key User Flows

1. **Authentication Flow**
   - User login/registration
   - Token management
   - Session handling

2. **Main Feature Flow**
   - User input processing
   - Data validation
   - Backend communication
   - Response handling

3. **Data Management Flow**
   - Data fetching
   - Local storage
   - Cache management
   - State synchronization

## Component Interaction

\`\`\`
┌────────────┐      ┌────────────┐      ┌────────────┐
│            │      │            │      │            │
│   Header   │◀────▶│    App     │◀────▶│   Footer   │
│            │      │            │      │            │
└────────────┘      └────────────┘      └────────────┘
                         │
     ┌──────────────────┬┴┬──────────────────┐
     │                  │ │                  │
     ▼                  ▼ ▼                  ▼
┌────────────┐      ┌────────────┐      ┌────────────┐
│            │      │            │      │            │
│  Features  │◀────▶│  Dashboard │◀────▶│  Settings  │
│            │      │            │      │            │
└────────────┘      └────────────┘      └────────────┘
     │                  │ │                  │
     └──────────────────┘ └──────────────────┘
\`\`\``;
  };

  const generatePseudoCode = (project: ProjectSuggestion) => {
    return `# Pseudo Code for ${project.title}

\`\`\`
// Main Application Structure
function initializeApp() {
  setupConfiguration()
  registerComponents()
  setupRouting()
  initializeState()
  
  // Authentication (if needed)
  if (requiresAuthentication) {
    setupAuthProviders()
    checkUserSession()
  }
  
  // Initialize services
  setupAPIServices()
  setupDataServices()
  
  // Render main UI
  renderApplication()
}

// User Authentication Flow
function authenticateUser(credentials) {
  validateInput(credentials)
  
  if (inputIsValid) {
    result = sendAuthRequest(credentials)
    
    if (result.success) {
      saveUserSession(result.userData)
      redirectToDashboard()
    } else {
      displayErrorMessage(result.error)
    }
  } else {
    highlightInvalidFields()
  }
}

// Main Feature Implementation
function implementMainFeature() {
  // Initialize components
  const uiComponents = createComponents()
  
  // Setup data flow
  const dataStore = initializeDataStore()
  
  // Register event handlers
  uiComponents.forEach(component => {
    registerEventListeners(component)
  })
  
  // Setup data synchronization
  setupRealTimeUpdates(dataStore)
  
  // Handle user interactions
  function handleUserAction(action) {
    validateAction(action)
    updateState(action)
    renderUpdates()
    
    if (requiresServerSync) {
      syncWithServer()
    }
  }
}

// Data Management
function manageData() {
  // Define data models
  const dataModels = defineModels()
  
  // CRUD operations
  function createItem(data) {
    validateData(data)
    const newItem = formatData(data)
    saveToStore(newItem)
    return newItem
  }
  
  function retrieveItems(filters) {
    const query = buildQuery(filters)
    return fetchFromStore(query)
  }
  
  function updateItem(id, changes) {
    validateChanges(changes)
    applyChanges(id, changes)
    notifySubscribers(id)
  }
  
  function deleteItem(id) {
    removeFromStore(id)
    cleanupReferences(id)
  }
}

// UI Rendering Logic
function renderUI(state) {
  const components = mapStateToComponents(state)
  
  components.forEach(component => {
    if (component.shouldUpdate) {
      updateDOMElement(component)
    }
  })
  
  attachEventHandlers()
  optimizeForPerformance()
}
\`\`\`

## Key Algorithms

1. **Data Processing**
\`\`\`
function processData(rawData) {
  const filteredData = rawData.filter(item => item && item.isValid)
  const transformedData = filteredData.map(item => transformItem(item))
  const groupedData = groupData(transformedData)
  return sortData(groupedData)
}
\`\`\`

2. **User Preference Management**
\`\`\`
function managePreferences(userId) {
  const savedPreferences = getUserPreferences(userId)
  const defaultSettings = getApplicationDefaults()
  
  return {
    ...defaultSettings,
    ...savedPreferences,
    lastUpdated: new Date().toISOString()
  }
}
\`\`\`

3. **Feature Optimization**
\`\`\`
function optimizePerformance(component) {
  useMemoForExpensiveCalculations()
  implementLazyLoadingForComponents()
  useBatchedStateUpdates()
  minimizeDOMChanges()
  
  return optimizedComponent
}
\`\`\``;
  };

  const renderSkeletonLoader = () => (
    <div className="space-y-4 animate-pulse">
      <div className="h-8 bg-muted rounded w-2/3"></div>
      <div className="h-4 bg-muted rounded w-full"></div>
      <div className="h-4 bg-muted rounded w-5/6"></div>
      <div className="h-10 bg-muted rounded w-full mt-4"></div>
      <div className="h-10 bg-muted rounded w-full"></div>
      <div className="h-10 bg-muted rounded w-full"></div>
    </div>
  );

  return (
    <>
      <Sheet open={open} onOpenChange={onOpenChange}>
        <SheetContent className="w-full sm:max-w-xl md:max-w-2xl lg:max-w-4xl overflow-y-auto">
          <SheetHeader className="mb-6">
            <SheetTitle className="text-2xl">Project Details</SheetTitle>
            <SheetDescription>
              {project && `Comprehensive information about "${project.title}"`}
              {activeAI && <span className="text-xs ml-2 bg-muted px-2 py-1 rounded-full">{activeAI.toUpperCase()} AI</span>}
            </SheetDescription>
          </SheetHeader>

          {project && (
            <div className="space-y-6">
              <div className="flex flex-wrap gap-2 mb-4">
                {project.skills.map((skill, index) => (
                  <Badge key={index} variant="secondary">{skill}</Badge>
                ))}
              </div>
              
              <Tabs defaultValue="description" value={currentTab} onValueChange={setCurrentTab}>
                <TabsList className="mb-4 w-full grid grid-cols-5">
                  <TabsTrigger value="description" className="flex items-center gap-2">
                    <FileText className="h-4 w-4" />
                    <span className="hidden sm:inline">Description</span>
                  </TabsTrigger>
                  <TabsTrigger value="structure" className="flex items-center gap-2">
                    <GitBranch className="h-4 w-4" />
                    <span className="hidden sm:inline">Structure</span>
                  </TabsTrigger>
                  <TabsTrigger value="roadmap" className="flex items-center gap-2">
                    <Map className="h-4 w-4" />
                    <span className="hidden sm:inline">Roadmap</span>
                  </TabsTrigger>
                  <TabsTrigger value="flowchart" className="flex items-center gap-2">
                    <svg className="h-4 w-4" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
                      <path d="M8 6H6a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2v-1M8 6v5h10V6M8 6V4a2 2 0 012-2h10a2 2 0 012 2v10a2 2 0 01-2 2h-2" />
                    </svg>
                    <span className="hidden sm:inline">Flowchart</span>
                  </TabsTrigger>
                  <TabsTrigger value="pseudocode" className="flex items-center gap-2">
                    <Code className="h-4 w-4" />
                    <span className="hidden sm:inline">Pseudo Code</span>
                  </TabsTrigger>
                </TabsList>
                
                <TabsContent value="description" className="space-y-4">
                  {loading ? (
                    renderSkeletonLoader()
                  ) : (
                    <Card>
                      <CardContent className="p-6 prose prose-sm max-w-none dark:prose-invert">
                        <div className="whitespace-pre-line markdown-content">
                          {projectDetails.detailedDescription.split('\n').map((line, i) => {
                            if (line.startsWith('# ')) {
                              return <h1 key={i} className="text-2xl font-bold mt-4 mb-2">{line.substring(2)}</h1>;
                            } else if (line.startsWith('## ')) {
                              return <h2 key={i} className="text-xl font-bold mt-4 mb-2">{line.substring(3)}</h2>;
                            } else if (line.startsWith('*')) {
                              return <em key={i} className="text-muted-foreground">{line}</em>;
                            } else {
                              return <p key={i} className="mb-2">{line}</p>;
                            }
                          })}
                        </div>
                      </CardContent>
                    </Card>
                  )}
                </TabsContent>
                
                <TabsContent value="structure" className="space-y-4">
                  {loading ? (
                    renderSkeletonLoader()
                  ) : (
                    <Card>
                      <CardContent className="p-6 prose prose-sm max-w-none dark:prose-invert">
                        <div className="whitespace-pre-line markdown-content">
                          {projectDetails.projectStructure.split('\n').map((line, i) => {
                            if (line.startsWith('# ')) {
                              return <h1 key={i} className="text-2xl font-bold mt-4 mb-2">{line.substring(2)}</h1>;
                            } else if (line.startsWith('## ')) {
                              return <h2 key={i} className="text-xl font-bold mt-4 mb-2">{line.substring(3)}</h2>;
                            } else if (line.startsWith('```') && line.length === 3) {
                              return <pre key={i} className="bg-muted p-4 rounded-md text-xs overflow-x-auto my-4"></pre>;
                            } else if (line.startsWith('- **')) {
                              return <div key={i} className="flex gap-2 mb-1">
                                <span className="font-bold">{line.split('**')[1]}:</span>
                                <span>{line.split('**: ')[1]}</span>
                              </div>;
                            } else {
                              return <p key={i} className="mb-2">{line}</p>;
                            }
                          })}
                        </div>
                      </CardContent>
                    </Card>
                  )}
                </TabsContent>
                
                <TabsContent value="roadmap" className="space-y-4">
                  {loading ? (
                    renderSkeletonLoader()
                  ) : (
                    <Card>
                      <CardContent className="p-6 prose prose-sm max-w-none dark:prose-invert">
                        <div className="whitespace-pre-line markdown-content">
                          {projectDetails.roadmap.split('\n').map((line, i) => {
                            if (line.startsWith('# ')) {
                              return <h1 key={i} className="text-2xl font-bold mt-4 mb-2">{line.substring(2)}</h1>;
                            } else if (line.startsWith('## ')) {
                              return <h2 key={i} className="text-xl font-bold mt-4 mb-2">{line.substring(3)}</h2>;
                            } else if (line.startsWith('- [ ]')) {
                              return <div key={i} className="flex items-start gap-2 mb-1">
                                <input type="checkbox" className="mt-1" disabled />
                                <span>{line.substring(6)}</span>
                              </div>;
                            } else if (line.startsWith('*')) {
                              return <em key={i} className="text-muted-foreground block mt-4">{line}</em>;
                            } else if (line.startsWith('1. **')) {
                              return <div key={i} className="flex gap-2 mb-1">
                                <span className="font-bold">{line.split('**')[1]}:</span>
                                <span>{line.split('**: ')[1]}</span>
                              </div>;
                            } else {
                              return <p key={i} className="mb-2">{line}</p>;
                            }
                          })}
                        </div>
                      </CardContent>
                    </Card>
                  )}
                </TabsContent>
                
                <TabsContent value="flowchart" className="space-y-4">
                  {loading ? (
                    renderSkeletonLoader()
                  ) : (
                    <Card>
                      <CardContent className="p-6 prose prose-sm max-w-none dark:prose-invert">
                        <div className="whitespace-pre-line markdown-content">
                          {projectDetails.flowchart.split('\n').map((line, i) => {
                            if (line.startsWith('# ')) {
                              return <h1 key={i} className="text-2xl font-bold mt-4 mb-2">{line.substring(2)}</h1>;
                            } else if (line.startsWith('## ')) {
                              return <h2 key={i} className="text-xl font-bold mt-4 mb-2">{line.substring(3)}</h2>;
                            } else if (line.startsWith('```') && line.length === 3) {
                              return null;
                            } else if (line.includes('┌') || line.includes('└') || line.includes('│') || line.includes('─') || line.includes('▶') || line.includes('◀')) {
                              return <pre key={i} className="bg-muted p-1 rounded-md text-xs overflow-x-auto my-0 font-mono">{line}</pre>;
                            } else if (line.startsWith('1. **')) {
                              return <div key={i} className="flex flex-col mb-3 mt-2">
                                <span className="font-bold">{line.split('**')[1]}</span>
                                <ul className="list-disc pl-8 mt-1">
                                  {line.split('- ').slice(1).map((item, idx) => (
                                    <li key={idx}>{item.trim()}</li>
                                  ))}
                                </ul>
                              </div>;
                            } else {
                              return <p key={i} className="mb-2">{line}</p>;
                            }
                          })}
                        </div>
                      </CardContent>
                    </Card>
                  )}
                </TabsContent>

                <TabsContent value="pseudocode" className="space-y-4">
                  {loading ? (
                    renderSkeletonLoader()
                  ) : (
                    <Card>
                      <CardContent className="p-6 prose prose-sm max-w-none dark:prose-invert">
                        <div className="whitespace-pre-line markdown-content">
                          {projectDetails.pseudoCode.split('\n').map((line, i) => {
                            if (line.startsWith('# ')) {
                              return <h1 key={i} className="text-2xl font-bold mt-4 mb-2">{line.substring(2)}</h1>;
                            } else if (line.startsWith('## ')) {
                              return <h2 key={i} className="text-xl font-bold mt-4 mb-2">{line.substring(3)}</h2>;
                            } else if (line.startsWith('```') && line.length === 3) {
                              return null;
                            } else if (line.startsWith('   ') || line.startsWith('function ') || line.startsWith('// ')) {
                              return <pre key={i} className="bg-muted p-1 rounded-md text-xs overflow-x-auto my-0 font-mono">{line}</pre>;
                            } else if (line.startsWith('1. **')) {
                              return <div key={i} className="flex flex-col mb-3 mt-2">
                                <span className="font-bold">{line.split('**')[1]}</span>
                              </div>;
                            } else {
                              return <p key={i} className="mb-2">{line}</p>;
                            }
                          })}
                        </div>
                      </CardContent>
                    </Card>
                  )}
                </TabsContent>
              </Tabs>
              
              <Separator />
              
              <div className="flex justify-between pt-4">
                <Button variant="outline" onClick={() => onOpenChange(false)}>
                  Close
                </Button>
                <Button 
                  onClick={() => setSourceCodeOpen(true)}
                  className="flex items-center gap-2"
                >
                  View Source Code & Resources
                </Button>
              </div>
            </div>
          )}
        </SheetContent>
      </Sheet>

      {project && (
        <ProjectSourceCode
          project={project}
          open={sourceCodeOpen}
          onOpenChange={setSourceCodeOpen}
        />
      )}
    </>
  );
};

export default ProjectDetailView;
